{"version":3,"file":"js/confetti-legacy.15e8b549c1e89de6212e.js","mappings":"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","sources":["webpack://europe-museum/./node_modules/vue-confetti/src/utils/get-random-number.js","webpack://europe-museum/./node_modules/vue-confetti/src/particles/base.js","webpack://europe-museum/./node_modules/vue-confetti/src/particles/circle.js","webpack://europe-museum/./node_modules/vue-confetti/src/particles/rect.js","webpack://europe-museum/./node_modules/vue-confetti/src/particles/heart.js","webpack://europe-museum/./node_modules/vue-confetti/src/particles/image.js","webpack://europe-museum/./node_modules/vue-confetti/src/factories/particle.js","webpack://europe-museum/./node_modules/vue-confetti/src/particle-manager.js","webpack://europe-museum/./node_modules/vue-confetti/src/canvas.js","webpack://europe-museum/./node_modules/vue-confetti/src/confetti.js","webpack://europe-museum/../src/vue/Confetti.vue?acca","webpack://europe-museum/../src/vue/Confetti.vue"],"sourcesContent":["/**\n * Return a random number.\n * @param {Number} [min]\n *   The minimum number (default 1).\n * @param {Number} [max]\n *   The maximum number (default min + 1).\n * @param {boolean} round\n *   True to round the number to the nearest integer, false otherwise.\n * @return {Number}\n *   A random number between min and max.\n */\nexport default (min = 1, max = min + 1, round = false) => {\n  const minN = parseFloat(min);\n  const maxN = parseFloat(max);\n  const n = Math.random() * (maxN - minN) + minN;\n  return round ? Math.round(n) : n;\n};\n","import getRandomNumber from '../utils/get-random-number';\n\n/**\n * A particle that can be drawn on a canvas.\n */\nexport default class BaseParticle {\n  /**\n   * Initialise.\n   * @param {object} options\n   *   The particle options.\n   * @param {string} options.color\n   *   The particle color.\n   * @param {number} options.size\n   *   The particle size.\n   * @param {number} options.dropRate\n   *   The speed at which particles fall.\n   */\n  constructor({\n    color = 'blue',\n    size = 10,\n    dropRate = 10,\n  } = {}) {\n    this.color = color;\n    this.size = size;\n    this.dropRate = dropRate;\n  }\n\n  /**\n   * Setup.\n   * @param {options} opts\n   *   The particle options.\n   */\n  setup({\n    canvas,\n    wind,\n    windPosCoef,\n    windSpeedMax,\n    count,\n  }) {\n    this.canvas = canvas;\n    this.wind = wind;\n    this.windPosCoef = windPosCoef;\n    this.windSpeedMax = windSpeedMax;\n    this.x = getRandomNumber(-35, this.canvas.width + 35);\n    this.y = getRandomNumber(-30, -35);\n    this.d = getRandomNumber(150) + 10; // density\n    this.particleSize = getRandomNumber(this.size, this.size * 2);\n    this.tilt = getRandomNumber(10);\n    this.tiltAngleIncremental = (\n      (getRandomNumber(0, 0.08) + 0.04) * (getRandomNumber() < 0.5 ? -1 : 1)\n    );\n    this.tiltAngle = 0;\n    this.angle = getRandomNumber(Math.PI * 2);\n    this.count = count + 1;\n    this.remove = false;\n    return this;\n  }\n\n  /**\n   * Update the particle.\n   */\n  update() {\n    this.tiltAngle += (this.tiltAngleIncremental * (\n      Math.cos(this.wind + (this.d + this.x + this.y) * this.windPosCoef)\n      * 0.2 + 1\n    ));\n    this.y += (Math.cos(this.angle + this.d) + parseInt(this.dropRate, 10)) / 2;\n\n    this.x += (Math.sin(this.angle) + Math.cos(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    )) * this.windSpeedMax;\n    this.y += Math.sin(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    ) * this.windSpeedMax;\n    this.tilt = (Math.sin(this.tiltAngle - (this.count / 3))) * 15;\n  }\n\n  /**\n   * Check if the particle is past the bottom of the canvas;\n   */\n  pastBottom() {\n    return this.y > this.canvas.height;\n  }\n\n  /**\n   * Draw a particle.\n   */\n  draw() {\n    this.canvas.ctx.fillStyle = this.color;\n    this.canvas.ctx.beginPath();\n    this.canvas.ctx.setTransform(\n      Math.cos(this.tiltAngle), // set the x axis to the tilt angle\n      Math.sin(this.tiltAngle),\n      0,\n      1,\n      this.x,\n      this.y, // set the origin\n    );\n  }\n\n  /**\n   * Kill the particle after it has left the screen.\n   */\n  kill() {\n    this.remove = true;\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a circular particle.\n */\nexport default class CircleParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.arc(0, 0, (this.particleSize / 2), 0, Math.PI * 2, false);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a rectangular particle.\n */\nexport default class RectParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.fillRect(0, 0, this.particleSize, this.particleSize / 2);\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a heart-shaped particle.\n */\nexport default class HeartParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    const curveTo = (cp1x, cp1y, cp2x, cp2y, x, y) => {\n      this.canvas.ctx.bezierCurveTo(\n        cp1x * (this.particleSize / 200),\n        cp1y * (this.particleSize / 200),\n        cp2x * (this.particleSize / 200),\n        cp2y * (this.particleSize / 200),\n        x * (this.particleSize / 200),\n        y * (this.particleSize / 200),\n      );\n    };\n    this.canvas.ctx.moveTo(37.5 / this.particleSize, 20 / this.particleSize);\n    curveTo(75, 37, 70, 25, 50, 25);\n    curveTo(20, 25, 20, 62.5, 20, 62.5);\n    curveTo(20, 80, 40, 102, 75, 120);\n    curveTo(110, 102, 130, 80, 130, 62.5);\n    curveTo(130, 62.5, 130, 25, 100, 25);\n    curveTo(85, 25, 75, 37, 75, 40);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing an image particle.\n */\nexport default class ImageParticle extends BaseParticle {\n  /**\n   * Initialise\n   * @param {HTMLImageElement} imgEl\n   *  An image element to pass through to ctx.drawImage.\n   */\n  constructor(opts, imgEl) {\n    super(opts);\n\n    this.imgEl = imgEl;\n  }\n\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.drawImage(this.imgEl, 0, 0, this.particleSize, this.particleSize);\n  }\n}\n","import getRandomNumber from '../utils/get-random-number';\nimport {\n  CircleParticle,\n  RectParticle,\n  HeartParticle,\n  ImageParticle,\n} from '../particles';\n\n/**\n * Create a particle based on the given options.\n * @param {object} options\n *   The particle options.\n * @returns {object}\n *   A particle.\n */\nexport default class ParticleFactory {\n  constructor() {\n    this.cachedImages = {};\n  }\n\n  /**\n   * Create an image element from the given source.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  createImageElement(imgSource) {\n    const imgEl = document.createElement('img');\n    imgEl.setAttribute('src', imgSource);\n    return imgEl;\n  }\n\n  /**\n   * Get an image element from a source string.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  getImageElement(imgSource) {\n    if (!this.cachedImages[imgSource]) {\n      this.cachedImages[imgSource] = this.createImageElement(imgSource);\n    }\n    return this.cachedImages[imgSource];\n  }\n\n  /**\n   * Get a random particle from the list of available particles.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getRandomParticle(options = {}) {\n    const particles = options.particles || [];\n\n    if (particles.length < 1) {\n      return {};\n    }\n\n    return particles[Math.floor(Math.random() * particles.length)];\n  }\n\n  /**\n   * Get the particle defaults.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getDefaults(options = {}) {\n    return {\n      type: options.defaultType || 'circle',\n      size: options.defaultSize || 10,\n      dropRate: options.defaultDropRate || 10,\n      colors: options.defaultColors || [\n        'DodgerBlue',\n        'OliveDrab',\n        'Gold',\n        'pink',\n        'SlateBlue',\n        'lightblue',\n        'Violet',\n        'PaleGreen',\n        'SteelBlue',\n        'SandyBrown',\n        'Chocolate',\n        'Crimson',\n      ],\n      url: null,\n    };\n  }\n\n  /**\n   * Create a particle.\n   * @param {Object} options\n   *   The particle options.\n   */\n  create(options) {\n    const defaults = this.getDefaults(options);\n    const particle = this.getRandomParticle(options);\n\n    const opts = Object.assign(defaults, particle);\n\n    // Set a random color from the array\n    const colorIndex = getRandomNumber(0, opts.colors.length - 1, true);\n    opts.color = opts.colors[colorIndex];\n\n    if (opts.type === 'circle') {\n      return new CircleParticle(opts);\n    }\n\n    if (opts.type === 'rect') {\n      return new RectParticle(opts);\n    }\n\n    if (opts.type === 'heart') {\n      return new HeartParticle(opts);\n    }\n\n    if (opts.type === 'image') {\n      return new ImageParticle(opts, this.getImageElement(opts.url));\n    }\n\n    throw Error(`Unknown particle type: \"${opts.type}\"`);\n  }\n}\n","import ParticleFactory from './factories/particle';\n\n/**\n * A particle generation and management service.\n */\nexport default class ParticleManger {\n  /**\n   * Initialise.\n   * @param {object} particleOptions\n   *   The particle options.\n   */\n  constructor(particleOptions) {\n    this.items = [];\n    this.pool = [];\n    this.particleOptions = particleOptions;\n    this.particleFactory = new ParticleFactory();\n  }\n\n  /**\n   * Update the position of each particle.\n   *\n   * Moves particles back to the pool if past the bottom and not due for removal.\n   */\n  update() {\n    const oldItems = [];\n    const newItems = [];\n\n    this.items.forEach((particle) => {\n      particle.update();\n\n      if (particle.pastBottom()) {\n        if (!particle.remove) {\n          particle.setup(this.particleOptions);\n          oldItems.push(particle);\n        }\n      } else {\n        newItems.push(particle);\n      }\n    });\n\n    this.pool.push(...oldItems);\n\n    this.items = newItems;\n  }\n\n  /**\n   * Draw the particles currently in view.\n   */\n  draw() {\n    this.items.forEach(item => item.draw());\n  }\n\n  /**\n   * Add an item to the view.\n   */\n  add() {\n    if (this.pool.length > 0) {\n      this.items.push(this.pool.pop().setup(this.particleOptions));\n    } else {\n      this.items.push(\n        this.particleFactory.create(this.particleOptions).setup(this.particleOptions),\n      );\n    }\n  }\n\n  /**\n   * Replace particles once they have left the screen.\n   */\n  refresh() {\n    this.items.forEach((item) => {\n      item.kill();\n    });\n\n    this.pool = [];\n  }\n}\n","/**\n * Class to generate and interact with an HTML canvas.\n */\nexport default class Canvas {\n  /**\n   * Initialise.\n   * @param {HTMLCanvasElement} [canvasElement]\n   *   An optional HTMLCanvasElement to override the default.\n   */\n  constructor(canvasElement) {\n    const defaultCanvasId = 'confetti-canvas';\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Element is not a valid HTMLCanvasElement');\n    }\n\n    this.isDefault = !canvasElement;\n\n    this.canvas = canvasElement || Canvas.createDefaultCanvas(defaultCanvasId);\n\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  /**\n   * Add a fixed, full-screen canvas to the page.\n   * @returns {HTMLCanvasElement}\n   *   A full-screen canvas.\n   */\n  static createDefaultCanvas(id) {\n    const canvas = document.createElement('canvas');\n    canvas.style.display = 'block';\n    canvas.style.position = 'fixed';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.top = 0;\n    canvas.style.width = '100vw';\n    canvas.style.height = '100vh';\n    canvas.id = id;\n    document.querySelector('body').appendChild(canvas);\n    return canvas;\n  }\n\n  /**\n   * Get the canvas width.\n   * @returns {Number}\n   *   The canvas width.\n   */\n  get width() {\n    return this.canvas.width;\n  }\n\n  /**\n   * Get the canvas height.\n   * @returns {Number}\n   *   The canvas height.\n   */\n  get height() {\n    return this.canvas.height;\n  }\n\n  /**\n   * Clear the canvas.\n   */\n  clear() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Update the canvas dimensions, if necessary.\n   */\n  updateDimensions() {\n    if (!this.isDefault) {\n      return;\n    }\n\n    if (this.width !== window.innerWidth || this.height !== window.innerHeight) {\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n    }\n  }\n}\n","import ParticleManager from './particle-manager';\nimport Canvas from './canvas';\n\n/**\n * A class to drawing confetti onto a canvas.\n */\nexport default class Confetti {\n  /**\n   * Initialise.\n   */\n  constructor() {\n    this.setDefaults();\n  }\n\n  /**\n   * Initialize default.\n   */\n  setDefaults() {\n    this.killed = false;\n    this.framesSinceDrop = 0;\n    this.canvas = null;\n    this.canvasEl = null;\n    this.W = 0;\n    this.H = 0;\n    this.particleManager = null;\n    this.particlesPerFrame = 0; // max particles dropped per frame\n    this.wind = 0;\n    this.windSpeed = 1;\n    this.windSpeedMax = 1;\n    this.windChange = 0.01;\n    this.windPosCoef = 0.002;\n    this.animationId = null;\n  }\n\n  getParticleOptions(opts) {\n    const options = {\n      canvas: this.canvas,\n      W: this.W,\n      H: this.H,\n      wind: this.wind,\n      windPosCoef: this.windPosCoef,\n      windSpeedMax: this.windSpeedMax,\n      count: 0,\n    };\n\n    Object.assign(options, opts);\n\n    return options;\n  }\n\n  /**\n   * Create the confetti particles.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  createParticles(opts = {}) {\n    const particleOpts = this.getParticleOptions(opts);\n    this.particleManager = new ParticleManager(particleOpts);\n  }\n\n  /**\n   * Get a canvas element from the given options.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  getCanvasElementFromOptions(opts) {\n    const { canvasId, canvasElement } = opts;\n    let canvasEl = canvasElement;\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Invalid options: canvasElement is not a valid HTMLCanvasElement');\n    }\n\n    if (canvasId && canvasElement) {\n      throw new Error('Invalid options: canvasId and canvasElement are mutually exclusive');\n    }\n\n    if (canvasId && !canvasEl) {\n      canvasEl = document.getElementById(canvasId);\n    }\n\n    if (canvasId && !(canvasEl instanceof HTMLCanvasElement)) {\n      throw new Error(`Invalid options: element with id \"${canvasId}\" is not a valid HTMLCanvasElement`);\n    }\n\n    return canvasEl;\n  }\n\n  /**\n   * Start dropping confetti.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  start(opts = {}) {\n    this.remove(); // clear any previous settings\n\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    this.canvas = new Canvas(canvasEl);\n    this.canvasEl = canvasEl;\n\n    this.createParticles(opts);\n    this.setGlobalOptions(opts);\n    this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n  }\n\n  /**\n   * Set the global options.\n   */\n  setGlobalOptions(opts) {\n    this.particlesPerFrame = opts.particlesPerFrame || 2;\n    this.windSpeedMax = opts.windSpeedMax || 1;\n  }\n\n  /**\n   * Stop dropping confetti.\n   */\n  stop() {\n    this.killed = true;\n    this.particlesPerFrame = 0;\n  }\n\n  /**\n   * Update the confetti options.\n   */\n  update(opts) {\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    // Restart if a different canvas is given\n    if (this.canvas && canvasEl !== this.canvasEl) {\n      this.start(opts);\n      return;\n    }\n\n    this.setGlobalOptions(opts);\n\n    if (this.particleManager) {\n      this.particleManager.particleOptions = this.getParticleOptions(opts);\n      this.particleManager.refresh();\n    }\n  }\n\n  /**\n   * Remove confetti.\n   */\n  remove() {\n    this.stop();\n\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n\n    if (this.canvas) {\n      this.canvas.clear();\n    }\n\n    this.setDefaults();\n  }\n\n  /**\n   * Run the main animation loop.\n   */\n  mainLoop(time) {\n    this.canvas.updateDimensions();\n    this.canvas.clear();\n\n    this.windSpeed = Math.sin(time / 8000) * this.windSpeedMax;\n    this.wind = this.particleManager.particleOptions.wind += this.windChange; // eslint-disable-line\n\n    let numberToAdd = this.framesSinceDrop * this.particlesPerFrame;\n\n    while (numberToAdd >= 1) {\n      this.particleManager.add();\n      numberToAdd -= 1;\n      this.framesSinceDrop = 0;\n    }\n\n    this.particleManager.update();\n    this.particleManager.draw();\n\n    // Stop calling if no particles left in view (i.e. it's been stopped)\n    if (!this.killed || this.particleManager.items.length) {\n      this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n    }\n\n    this.framesSinceDrop += 1;\n  }\n}\n","\n    import {ref, defineComponent} from 'vue';\n    import Confetti from 'vue-confetti/src/confetti.js';\n\n    export default defineComponent({\n        setup() {\n            const confetti = ref(new Confetti());\n\n            return {\n                confetti,\n            };\n        },\n        mounted() {\n            const config : Partial<ConfettiConfig> = {\n                defaultType: 'heart',\n                defaultSize: 20,\n                defaultColors: ['DodgerBlue', 'OliveDrab', 'Gold', 'pink', 'SlateBlue', 'lightblue', 'Violet', 'PaleGreen', 'SteelBlue', 'SandyBrown', 'Chocolate', 'Crimson'],\n            };\n\n            this.confetti.start(config);\n            setTimeout(() => {\n                this.confetti.stop();\n            }, 5000);\n        },\n    });\n","import { render } from \"./Confetti.vue?vue&type=template&id=29d47a51\"\nimport script from \"./Confetti.vue?vue&type=script&lang=ts\"\nexport * from \"./Confetti.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"names":["min","max","round","minN","parseFloat","maxN","n","Math","random","BaseParticle","constructor","color","size","dropRate","this","setup","canvas","wind","windPosCoef","windSpeedMax","count","x","width","y","d","particleSize","tilt","tiltAngleIncremental","tiltAngle","angle","PI","remove","update","cos","parseInt","sin","pastBottom","height","draw","ctx","fillStyle","beginPath","setTransform","kill","CircleParticle","super","arc","fill","RectParticle","fillRect","HeartParticle","curveTo","cp1x","cp1y","cp2x","cp2y","bezierCurveTo","moveTo","ImageParticle","opts","imgEl","drawImage","ParticleFactory","cachedImages","createImageElement","imgSource","document","createElement","setAttribute","getImageElement","getRandomParticle","options","particles","length","floor","getDefaults","type","defaultType","defaultSize","defaultDropRate","colors","defaultColors","url","create","defaults","particle","Object","assign","colorIndex","Error","ParticleManger","particleOptions","items","pool","particleFactory","oldItems","newItems","forEach","push","item","add","pop","refresh","Canvas","canvasElement","HTMLCanvasElement","isDefault","createDefaultCanvas","getContext","id","style","display","position","pointerEvents","top","querySelector","appendChild","clear","clearRect","updateDimensions","window","innerWidth","innerHeight","Confetti","setDefaults","killed","framesSinceDrop","canvasEl","W","H","particleManager","particlesPerFrame","windSpeed","windChange","animationId","getParticleOptions","createParticles","particleOpts","getCanvasElementFromOptions","canvasId","getElementById","start","setGlobalOptions","requestAnimationFrame","mainLoop","bind","stop","cancelAnimationFrame","time","numberToAdd","confetti","mounted","setTimeout"],"sourceRoot":""}